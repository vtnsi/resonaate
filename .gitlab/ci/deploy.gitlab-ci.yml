#####################
# Base Job Settings #
#####################

include:
  - local: /.gitlab/ci/common.gitlab-ci.yml

##################
# Script Aliases #
##################

# deploy to Gitlab Pages command
.deploy-pages: &deploy-pages
  - mv docs/build/html/ ./public/

# deploy source & wheel dist to Gitlab package registry
.deploy-twine: &deploy-twine
  - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*

###################
# Base Deploy Job #
###################

.deploy-base:
  stage: deploy
  before_script:
    - !reference [.apt-update]
    - !reference [.create-venv]
  artifacts:
    expire_in: 1 week
  when: on_success

####################
# Pages Deploy Job #
####################

# For deployment to Gitlab Pages....
pages:
  extends: .deploy-base
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:pages[collapsed=true]\r\e[0K Moving docs to public folder"
    - *deploy-pages
    - echo -e "\e[0Ksection_end:`date +%s`:pages\r\e[0K"
  needs:
    - sphinx
  artifacts:
    paths:
      - public
    expose_as: "Documentation"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never

######################
# Publish Deploy Job #
######################

# For deployment to Gitlab Package Registry....
publish-pkg:
  extends: .deploy-base
  before_script:
    - echo $RESONAATE_VERSION
    - python3 -m pip install twine
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:deploy_twine[collapsed=true]\r\e[0K Publishing to Gitlab package registry"
    - *deploy-twine
    - echo -e "\e[0Ksection_end:`date +%s`:deploy_twine\r\e[0K"
  needs:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success

########################
# Container Deploy Job #
########################

# Build container using buildah tool, to avoid dind security issues.
# [NOTE]: This is currently never run
publish-container:
  extends: .deploy-base
  before_script:
    - !reference [.apt-update]
    - echo -e "\e[0Ksection_start:`date +%s`:install_buildah[collapsed=true]\r\e[0K Install buildah "
    - sudo apt-get -y install buildah
    - echo -e "\e[0Ksection_end:`date +%s`:install_buildah\r\e[0K"
  script:
    - export STORAGE_DRIVER=vfs
    - export BUILDAH_FORMAT=docker
    - export REGISTRY_AUTH_FILE=${HOME}/auth.json
    - export FQ_IMAGE_NAME="${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${RESONAATE_VERSION}"
    - buildah login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - buildah bud -t ${IMAGE_NAME} .
    - export CONTAINER_ID=$(buildah from ${IMAGE_NAME})
    - buildah commit --squash $CONTAINER_ID $FQ_IMAGE_NAME
    - buildah push ${FQ_IMAGE_NAME}
  variables:
    IMAGE_NAME: "resonaate"
  needs:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never
